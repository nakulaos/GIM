// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pb_red_env_receive/red_env_receive.proto

package pb_red_env_receive

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RedEnvReceive_GrabRedEnvelope_FullMethodName = "/pb_red_env_receive.RedEnvReceive/GrabRedEnvelope"
	RedEnvReceive_OpenRedEnvelope_FullMethodName = "/pb_red_env_receive.RedEnvReceive/OpenRedEnvelope"
)

// RedEnvReceiveClient is the client API for RedEnvReceive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedEnvReceiveClient interface {
	GrabRedEnvelope(ctx context.Context, in *GrabRedEnvelopeReq, opts ...grpc.CallOption) (*GrabRedEnvelopeResp, error)
	OpenRedEnvelope(ctx context.Context, in *OpenRedEnvelopeReq, opts ...grpc.CallOption) (*OpenRedEnvelopeResp, error)
}

type redEnvReceiveClient struct {
	cc grpc.ClientConnInterface
}

func NewRedEnvReceiveClient(cc grpc.ClientConnInterface) RedEnvReceiveClient {
	return &redEnvReceiveClient{cc}
}

func (c *redEnvReceiveClient) GrabRedEnvelope(ctx context.Context, in *GrabRedEnvelopeReq, opts ...grpc.CallOption) (*GrabRedEnvelopeResp, error) {
	out := new(GrabRedEnvelopeResp)
	err := c.cc.Invoke(ctx, RedEnvReceive_GrabRedEnvelope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redEnvReceiveClient) OpenRedEnvelope(ctx context.Context, in *OpenRedEnvelopeReq, opts ...grpc.CallOption) (*OpenRedEnvelopeResp, error) {
	out := new(OpenRedEnvelopeResp)
	err := c.cc.Invoke(ctx, RedEnvReceive_OpenRedEnvelope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedEnvReceiveServer is the server API for RedEnvReceive service.
// All implementations must embed UnimplementedRedEnvReceiveServer
// for forward compatibility
type RedEnvReceiveServer interface {
	GrabRedEnvelope(context.Context, *GrabRedEnvelopeReq) (*GrabRedEnvelopeResp, error)
	OpenRedEnvelope(context.Context, *OpenRedEnvelopeReq) (*OpenRedEnvelopeResp, error)
	mustEmbedUnimplementedRedEnvReceiveServer()
}

// UnimplementedRedEnvReceiveServer must be embedded to have forward compatible implementations.
type UnimplementedRedEnvReceiveServer struct {
}

func (UnimplementedRedEnvReceiveServer) GrabRedEnvelope(context.Context, *GrabRedEnvelopeReq) (*GrabRedEnvelopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrabRedEnvelope not implemented")
}
func (UnimplementedRedEnvReceiveServer) OpenRedEnvelope(context.Context, *OpenRedEnvelopeReq) (*OpenRedEnvelopeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenRedEnvelope not implemented")
}
func (UnimplementedRedEnvReceiveServer) mustEmbedUnimplementedRedEnvReceiveServer() {}

// UnsafeRedEnvReceiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedEnvReceiveServer will
// result in compilation errors.
type UnsafeRedEnvReceiveServer interface {
	mustEmbedUnimplementedRedEnvReceiveServer()
}

func RegisterRedEnvReceiveServer(s grpc.ServiceRegistrar, srv RedEnvReceiveServer) {
	s.RegisterService(&RedEnvReceive_ServiceDesc, srv)
}

func _RedEnvReceive_GrabRedEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrabRedEnvelopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvReceiveServer).GrabRedEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedEnvReceive_GrabRedEnvelope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvReceiveServer).GrabRedEnvelope(ctx, req.(*GrabRedEnvelopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedEnvReceive_OpenRedEnvelope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRedEnvelopeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedEnvReceiveServer).OpenRedEnvelope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedEnvReceive_OpenRedEnvelope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedEnvReceiveServer).OpenRedEnvelope(ctx, req.(*OpenRedEnvelopeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RedEnvReceive_ServiceDesc is the grpc.ServiceDesc for RedEnvReceive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedEnvReceive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_red_env_receive.RedEnvReceive",
	HandlerType: (*RedEnvReceiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrabRedEnvelope",
			Handler:    _RedEnvReceive_GrabRedEnvelope_Handler,
		},
		{
			MethodName: "OpenRedEnvelope",
			Handler:    _RedEnvReceive_OpenRedEnvelope_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_red_env_receive/red_env_receive.proto",
}
