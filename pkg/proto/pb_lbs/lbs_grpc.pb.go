// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: pb_lbs/lbs.proto

package pb_lbs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lbs_ReportLngLat_FullMethodName = "/pb_lbs.Lbs/ReportLngLat"
	Lbs_PeopleNearby_FullMethodName = "/pb_lbs.Lbs/PeopleNearby"
)

// LbsClient is the client API for Lbs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LbsClient interface {
	ReportLngLat(ctx context.Context, in *ReportLngLatReq, opts ...grpc.CallOption) (*ReportLngLatResp, error)
	PeopleNearby(ctx context.Context, in *PeopleNearbyReq, opts ...grpc.CallOption) (*PeopleNearbyResp, error)
}

type lbsClient struct {
	cc grpc.ClientConnInterface
}

func NewLbsClient(cc grpc.ClientConnInterface) LbsClient {
	return &lbsClient{cc}
}

func (c *lbsClient) ReportLngLat(ctx context.Context, in *ReportLngLatReq, opts ...grpc.CallOption) (*ReportLngLatResp, error) {
	out := new(ReportLngLatResp)
	err := c.cc.Invoke(ctx, Lbs_ReportLngLat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lbsClient) PeopleNearby(ctx context.Context, in *PeopleNearbyReq, opts ...grpc.CallOption) (*PeopleNearbyResp, error) {
	out := new(PeopleNearbyResp)
	err := c.cc.Invoke(ctx, Lbs_PeopleNearby_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbsServer is the server API for Lbs service.
// All implementations must embed UnimplementedLbsServer
// for forward compatibility
type LbsServer interface {
	ReportLngLat(context.Context, *ReportLngLatReq) (*ReportLngLatResp, error)
	PeopleNearby(context.Context, *PeopleNearbyReq) (*PeopleNearbyResp, error)
	mustEmbedUnimplementedLbsServer()
}

// UnimplementedLbsServer must be embedded to have forward compatible implementations.
type UnimplementedLbsServer struct {
}

func (UnimplementedLbsServer) ReportLngLat(context.Context, *ReportLngLatReq) (*ReportLngLatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportLngLat not implemented")
}
func (UnimplementedLbsServer) PeopleNearby(context.Context, *PeopleNearbyReq) (*PeopleNearbyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeopleNearby not implemented")
}
func (UnimplementedLbsServer) mustEmbedUnimplementedLbsServer() {}

// UnsafeLbsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LbsServer will
// result in compilation errors.
type UnsafeLbsServer interface {
	mustEmbedUnimplementedLbsServer()
}

func RegisterLbsServer(s grpc.ServiceRegistrar, srv LbsServer) {
	s.RegisterService(&Lbs_ServiceDesc, srv)
}

func _Lbs_ReportLngLat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportLngLatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsServer).ReportLngLat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lbs_ReportLngLat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsServer).ReportLngLat(ctx, req.(*ReportLngLatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lbs_PeopleNearby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeopleNearbyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbsServer).PeopleNearby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lbs_PeopleNearby_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbsServer).PeopleNearby(ctx, req.(*PeopleNearbyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Lbs_ServiceDesc is the grpc.ServiceDesc for Lbs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lbs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_lbs.Lbs",
	HandlerType: (*LbsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportLngLat",
			Handler:    _Lbs_ReportLngLat_Handler,
		},
		{
			MethodName: "PeopleNearby",
			Handler:    _Lbs_PeopleNearby_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_lbs/lbs.proto",
}
