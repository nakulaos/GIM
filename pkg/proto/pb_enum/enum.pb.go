// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: pb_enum/enum.proto

package pb_enum

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACCOUNT_TYPE int32

const (
	ACCOUNT_TYPE_UNKNOWN_ACCOUNT_TYPE ACCOUNT_TYPE = 0
	ACCOUNT_TYPE_MOBILE               ACCOUNT_TYPE = 1 // 手机登录
	ACCOUNT_TYPE_LARK                 ACCOUNT_TYPE = 2 // lark账户登录
	ACCOUNT_TYPE_UID                  ACCOUNT_TYPE = 3 // lark账户UID
)

// Enum value maps for ACCOUNT_TYPE.
var (
	ACCOUNT_TYPE_name = map[int32]string{
		0: "UNKNOWN_ACCOUNT_TYPE",
		1: "MOBILE",
		2: "LARK",
		3: "UID",
	}
	ACCOUNT_TYPE_value = map[string]int32{
		"UNKNOWN_ACCOUNT_TYPE": 0,
		"MOBILE":               1,
		"LARK":                 2,
		"UID":                  3,
	}
)

func (x ACCOUNT_TYPE) Enum() *ACCOUNT_TYPE {
	p := new(ACCOUNT_TYPE)
	*p = x
	return p
}

func (x ACCOUNT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACCOUNT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[0].Descriptor()
}

func (ACCOUNT_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[0]
}

func (x ACCOUNT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACCOUNT_TYPE.Descriptor instead.
func (ACCOUNT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{0}
}

type TOPIC int32

const (
	TOPIC_UNKNOWN_TOPIC TOPIC = 0
	TOPIC_CHAT          TOPIC = 1 // 聊天
	TOPIC_CHAT_INVITE   TOPIC = 2 // 聊天邀请
	TOPIC_RED_ENVELOPE  TOPIC = 3 // 红包
	TOPIC_READ_RECEIPT  TOPIC = 4 // 消息已读回执
)

// Enum value maps for TOPIC.
var (
	TOPIC_name = map[int32]string{
		0: "UNKNOWN_TOPIC",
		1: "CHAT",
		2: "CHAT_INVITE",
		3: "RED_ENVELOPE",
		4: "READ_RECEIPT",
	}
	TOPIC_value = map[string]int32{
		"UNKNOWN_TOPIC": 0,
		"CHAT":          1,
		"CHAT_INVITE":   2,
		"RED_ENVELOPE":  3,
		"READ_RECEIPT":  4,
	}
)

func (x TOPIC) Enum() *TOPIC {
	p := new(TOPIC)
	*p = x
	return p
}

func (x TOPIC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TOPIC) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[1].Descriptor()
}

func (TOPIC) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[1]
}

func (x TOPIC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TOPIC.Descriptor instead.
func (TOPIC) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{1}
}

type SUB_TOPIC int32

const (
	SUB_TOPIC_UNKNOWN_SUB_TOPIC SUB_TOPIC = 0
	// 1000~1999
	SUB_TOPIC_CHAT_MSG                SUB_TOPIC = 1000 // 聊天消息
	SUB_TOPIC_CHAT_MSG_READ_RECEIPT   SUB_TOPIC = 1001 // 消息已读
	SUB_TOPIC_CHAT_OPERATION          SUB_TOPIC = 1002 // 消息操作
	SUB_TOPIC_CHAT_JOINED_GROUP_CHAT  SUB_TOPIC = 1003 // 加入群通知
	SUB_TOPIC_CHAT_QUIT_GROUP_CHAT    SUB_TOPIC = 1004 // 退出群通知
	SUB_TOPIC_CHAT_REMOVE_CHAT_MEMBER SUB_TOPIC = 1005 // 移除群
	// 2000~2999
	SUB_TOPIC_CHAT_INVITE_REQUEST SUB_TOPIC = 2000 // 加入Chat邀请
	// 3000~3999
	SUB_TOPIC_CHAT_GIVE_RED_ENVELOPE    SUB_TOPIC = 3000 // 发红包
	SUB_TOPIC_CHAT_RECEIVE_RED_ENVELOPE SUB_TOPIC = 3001 // 收红包
)

// Enum value maps for SUB_TOPIC.
var (
	SUB_TOPIC_name = map[int32]string{
		0:    "UNKNOWN_SUB_TOPIC",
		1000: "CHAT_MSG",
		1001: "CHAT_MSG_READ_RECEIPT",
		1002: "CHAT_OPERATION",
		1003: "CHAT_JOINED_GROUP_CHAT",
		1004: "CHAT_QUIT_GROUP_CHAT",
		1005: "CHAT_REMOVE_CHAT_MEMBER",
		2000: "CHAT_INVITE_REQUEST",
		3000: "CHAT_GIVE_RED_ENVELOPE",
		3001: "CHAT_RECEIVE_RED_ENVELOPE",
	}
	SUB_TOPIC_value = map[string]int32{
		"UNKNOWN_SUB_TOPIC":         0,
		"CHAT_MSG":                  1000,
		"CHAT_MSG_READ_RECEIPT":     1001,
		"CHAT_OPERATION":            1002,
		"CHAT_JOINED_GROUP_CHAT":    1003,
		"CHAT_QUIT_GROUP_CHAT":      1004,
		"CHAT_REMOVE_CHAT_MEMBER":   1005,
		"CHAT_INVITE_REQUEST":       2000,
		"CHAT_GIVE_RED_ENVELOPE":    3000,
		"CHAT_RECEIVE_RED_ENVELOPE": 3001,
	}
)

func (x SUB_TOPIC) Enum() *SUB_TOPIC {
	p := new(SUB_TOPIC)
	*p = x
	return p
}

func (x SUB_TOPIC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SUB_TOPIC) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[2].Descriptor()
}

func (SUB_TOPIC) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[2]
}

func (x SUB_TOPIC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SUB_TOPIC.Descriptor instead.
func (SUB_TOPIC) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{2}
}

type MESSAGE_TYPE int32

const (
	MESSAGE_TYPE_NEW  MESSAGE_TYPE = 0
	MESSAGE_TYPE_RESP MESSAGE_TYPE = 1
)

// Enum value maps for MESSAGE_TYPE.
var (
	MESSAGE_TYPE_name = map[int32]string{
		0: "NEW",
		1: "RESP",
	}
	MESSAGE_TYPE_value = map[string]int32{
		"NEW":  0,
		"RESP": 1,
	}
)

func (x MESSAGE_TYPE) Enum() *MESSAGE_TYPE {
	p := new(MESSAGE_TYPE)
	*p = x
	return p
}

func (x MESSAGE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MESSAGE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[3].Descriptor()
}

func (MESSAGE_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[3]
}

func (x MESSAGE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MESSAGE_TYPE.Descriptor instead.
func (MESSAGE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{3}
}

type CHAT_TYPE int32

const (
	CHAT_TYPE_UNKNOWN_CHAT_TYPE CHAT_TYPE = 0
	CHAT_TYPE_PRIVATE           CHAT_TYPE = 1 // 私聊
	CHAT_TYPE_GROUP             CHAT_TYPE = 2 // 群聊
)

// Enum value maps for CHAT_TYPE.
var (
	CHAT_TYPE_name = map[int32]string{
		0: "UNKNOWN_CHAT_TYPE",
		1: "PRIVATE",
		2: "GROUP",
	}
	CHAT_TYPE_value = map[string]int32{
		"UNKNOWN_CHAT_TYPE": 0,
		"PRIVATE":           1,
		"GROUP":             2,
	}
)

func (x CHAT_TYPE) Enum() *CHAT_TYPE {
	p := new(CHAT_TYPE)
	*p = x
	return p
}

func (x CHAT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHAT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[4].Descriptor()
}

func (CHAT_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[4]
}

func (x CHAT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHAT_TYPE.Descriptor instead.
func (CHAT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{4}
}

type PLATFORM_TYPE int32

const (
	PLATFORM_TYPE_UNKNOWN_PLATFORM_TYPE PLATFORM_TYPE = 0
	PLATFORM_TYPE_IOS                   PLATFORM_TYPE = 1
	PLATFORM_TYPE_ANDROID               PLATFORM_TYPE = 2
	PLATFORM_TYPE_MAC                   PLATFORM_TYPE = 3
	PLATFORM_TYPE_WINDOWS               PLATFORM_TYPE = 4
	PLATFORM_TYPE_WEB                   PLATFORM_TYPE = 5
)

// Enum value maps for PLATFORM_TYPE.
var (
	PLATFORM_TYPE_name = map[int32]string{
		0: "UNKNOWN_PLATFORM_TYPE",
		1: "IOS",
		2: "ANDROID",
		3: "MAC",
		4: "WINDOWS",
		5: "WEB",
	}
	PLATFORM_TYPE_value = map[string]int32{
		"UNKNOWN_PLATFORM_TYPE": 0,
		"IOS":                   1,
		"ANDROID":               2,
		"MAC":                   3,
		"WINDOWS":               4,
		"WEB":                   5,
	}
)

func (x PLATFORM_TYPE) Enum() *PLATFORM_TYPE {
	p := new(PLATFORM_TYPE)
	*p = x
	return p
}

func (x PLATFORM_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PLATFORM_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[5].Descriptor()
}

func (PLATFORM_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[5]
}

func (x PLATFORM_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PLATFORM_TYPE.Descriptor instead.
func (PLATFORM_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{5}
}

type MSG_FROM int32

const (
	MSG_FROM_UNKNOWN_MSG_FROM MSG_FROM = 0
	MSG_FROM_USER             MSG_FROM = 1 // 用户消息
	MSG_FROM_SYSTEM           MSG_FROM = 2 // 系统消息
)

// Enum value maps for MSG_FROM.
var (
	MSG_FROM_name = map[int32]string{
		0: "UNKNOWN_MSG_FROM",
		1: "USER",
		2: "SYSTEM",
	}
	MSG_FROM_value = map[string]int32{
		"UNKNOWN_MSG_FROM": 0,
		"USER":             1,
		"SYSTEM":           2,
	}
)

func (x MSG_FROM) Enum() *MSG_FROM {
	p := new(MSG_FROM)
	*p = x
	return p
}

func (x MSG_FROM) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSG_FROM) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[6].Descriptor()
}

func (MSG_FROM) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[6]
}

func (x MSG_FROM) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSG_FROM.Descriptor instead.
func (MSG_FROM) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{6}
}

type MSG_TYPE int32

const (
	MSG_TYPE_UNKNOWN_MSG_TYPE     MSG_TYPE = 0
	MSG_TYPE_TEXT                 MSG_TYPE = 1 // 文本
	MSG_TYPE_POST                 MSG_TYPE = 2
	MSG_TYPE_IMAGE                MSG_TYPE = 3
	MSG_TYPE_FILE                 MSG_TYPE = 4
	MSG_TYPE_AUDIO                MSG_TYPE = 5
	MSG_TYPE_MEDIA                MSG_TYPE = 6
	MSG_TYPE_STICKER              MSG_TYPE = 7
	MSG_TYPE_INTERACTIVE          MSG_TYPE = 8
	MSG_TYPE_SHARE_CHAT           MSG_TYPE = 9
	MSG_TYPE_SHARE_USER           MSG_TYPE = 10
	MSG_TYPE_CHAT_INVITE_MSG      MSG_TYPE = 11 // 邀请
	MSG_TYPE_ACCEPTED_CHAT_INVITE MSG_TYPE = 12 // 同意邀请
	MSG_TYPE_JOINED_GROUP_CHAT    MSG_TYPE = 13 // 加入群聊
	MSG_TYPE_QUIT_GROUP_CHAT      MSG_TYPE = 14 // 退出群聊
	MSG_TYPE_REMOVE_CHAT_MEMBER   MSG_TYPE = 15 // 将成员移除群
	MSG_TYPE_GIVE_RED_ENV         MSG_TYPE = 16 // 派红包
	MSG_TYPE_RECEIVE_RED_ENV      MSG_TYPE = 17 // 收红包
)

// Enum value maps for MSG_TYPE.
var (
	MSG_TYPE_name = map[int32]string{
		0:  "UNKNOWN_MSG_TYPE",
		1:  "TEXT",
		2:  "POST",
		3:  "IMAGE",
		4:  "FILE",
		5:  "AUDIO",
		6:  "MEDIA",
		7:  "STICKER",
		8:  "INTERACTIVE",
		9:  "SHARE_CHAT",
		10: "SHARE_USER",
		11: "CHAT_INVITE_MSG",
		12: "ACCEPTED_CHAT_INVITE",
		13: "JOINED_GROUP_CHAT",
		14: "QUIT_GROUP_CHAT",
		15: "REMOVE_CHAT_MEMBER",
		16: "GIVE_RED_ENV",
		17: "RECEIVE_RED_ENV",
	}
	MSG_TYPE_value = map[string]int32{
		"UNKNOWN_MSG_TYPE":     0,
		"TEXT":                 1,
		"POST":                 2,
		"IMAGE":                3,
		"FILE":                 4,
		"AUDIO":                5,
		"MEDIA":                6,
		"STICKER":              7,
		"INTERACTIVE":          8,
		"SHARE_CHAT":           9,
		"SHARE_USER":           10,
		"CHAT_INVITE_MSG":      11,
		"ACCEPTED_CHAT_INVITE": 12,
		"JOINED_GROUP_CHAT":    13,
		"QUIT_GROUP_CHAT":      14,
		"REMOVE_CHAT_MEMBER":   15,
		"GIVE_RED_ENV":         16,
		"RECEIVE_RED_ENV":      17,
	}
)

func (x MSG_TYPE) Enum() *MSG_TYPE {
	p := new(MSG_TYPE)
	*p = x
	return p
}

func (x MSG_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSG_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[7].Descriptor()
}

func (MSG_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[7]
}

func (x MSG_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSG_TYPE.Descriptor instead.
func (MSG_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{7}
}

type CHAT_STATUS int32

const (
	CHAT_STATUS_NORMAL      CHAT_STATUS = 0 // 正常模式
	CHAT_STATUS_MUTE        CHAT_STATUS = 1 // 开启免打扰
	CHAT_STATUS_BANNED      CHAT_STATUS = 2 // 被禁言
	CHAT_STATUS_QUITTED     CHAT_STATUS = 3 // 退出会话
	CHAT_STATUS_DELETED     CHAT_STATUS = 4 // 被删除
	CHAT_STATUS_REMOVED     CHAT_STATUS = 5 // 被删除(CHAT GROUP)
	CHAT_STATUS_NON_CONTACT CHAT_STATUS = 6 // 非联系人
)

// Enum value maps for CHAT_STATUS.
var (
	CHAT_STATUS_name = map[int32]string{
		0: "NORMAL",
		1: "MUTE",
		2: "BANNED",
		3: "QUITTED",
		4: "DELETED",
		5: "REMOVED",
		6: "NON_CONTACT",
	}
	CHAT_STATUS_value = map[string]int32{
		"NORMAL":      0,
		"MUTE":        1,
		"BANNED":      2,
		"QUITTED":     3,
		"DELETED":     4,
		"REMOVED":     5,
		"NON_CONTACT": 6,
	}
)

func (x CHAT_STATUS) Enum() *CHAT_STATUS {
	p := new(CHAT_STATUS)
	*p = x
	return p
}

func (x CHAT_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHAT_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[8].Descriptor()
}

func (CHAT_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[8]
}

func (x CHAT_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHAT_STATUS.Descriptor instead.
func (CHAT_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{8}
}

type INVITE_ROLE int32

const (
	INVITE_ROLE_UNKNOWN_INVITE_ROLE INVITE_ROLE = 0
	INVITE_ROLE_INITIATOR           INVITE_ROLE = 1 // 发起者
	INVITE_ROLE_APPROVER            INVITE_ROLE = 2 // 审批人
)

// Enum value maps for INVITE_ROLE.
var (
	INVITE_ROLE_name = map[int32]string{
		0: "UNKNOWN_INVITE_ROLE",
		1: "INITIATOR",
		2: "APPROVER",
	}
	INVITE_ROLE_value = map[string]int32{
		"UNKNOWN_INVITE_ROLE": 0,
		"INITIATOR":           1,
		"APPROVER":            2,
	}
)

func (x INVITE_ROLE) Enum() *INVITE_ROLE {
	p := new(INVITE_ROLE)
	*p = x
	return p
}

func (x INVITE_ROLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVITE_ROLE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[9].Descriptor()
}

func (INVITE_ROLE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[9]
}

func (x INVITE_ROLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVITE_ROLE.Descriptor instead.
func (INVITE_ROLE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{9}
}

type INVITE_HANDLE_RESULT int32

const (
	INVITE_HANDLE_RESULT_UNKNOWN_INVITE_HANDLE_RESULT INVITE_HANDLE_RESULT = 0
	INVITE_HANDLE_RESULT_ACCEPT                       INVITE_HANDLE_RESULT = 1 // 同意
	INVITE_HANDLE_RESULT_REFUSE                       INVITE_HANDLE_RESULT = 2 // 拒绝
)

// Enum value maps for INVITE_HANDLE_RESULT.
var (
	INVITE_HANDLE_RESULT_name = map[int32]string{
		0: "UNKNOWN_INVITE_HANDLE_RESULT",
		1: "ACCEPT",
		2: "REFUSE",
	}
	INVITE_HANDLE_RESULT_value = map[string]int32{
		"UNKNOWN_INVITE_HANDLE_RESULT": 0,
		"ACCEPT":                       1,
		"REFUSE":                       2,
	}
)

func (x INVITE_HANDLE_RESULT) Enum() *INVITE_HANDLE_RESULT {
	p := new(INVITE_HANDLE_RESULT)
	*p = x
	return p
}

func (x INVITE_HANDLE_RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (INVITE_HANDLE_RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[10].Descriptor()
}

func (INVITE_HANDLE_RESULT) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[10]
}

func (x INVITE_HANDLE_RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use INVITE_HANDLE_RESULT.Descriptor instead.
func (INVITE_HANDLE_RESULT) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{10}
}

type AVATAR_OWNER int32

const (
	AVATAR_OWNER_UNKNOWN_AVATAR_OWNER AVATAR_OWNER = 0
	AVATAR_OWNER_USER_AVATAR          AVATAR_OWNER = 1 // 用户头像
	AVATAR_OWNER_CHAT_AVATAR          AVATAR_OWNER = 2 // 群头像
)

// Enum value maps for AVATAR_OWNER.
var (
	AVATAR_OWNER_name = map[int32]string{
		0: "UNKNOWN_AVATAR_OWNER",
		1: "USER_AVATAR",
		2: "CHAT_AVATAR",
	}
	AVATAR_OWNER_value = map[string]int32{
		"UNKNOWN_AVATAR_OWNER": 0,
		"USER_AVATAR":          1,
		"CHAT_AVATAR":          2,
	}
)

func (x AVATAR_OWNER) Enum() *AVATAR_OWNER {
	p := new(AVATAR_OWNER)
	*p = x
	return p
}

func (x AVATAR_OWNER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AVATAR_OWNER) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[11].Descriptor()
}

func (AVATAR_OWNER) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[11]
}

func (x AVATAR_OWNER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AVATAR_OWNER.Descriptor instead.
func (AVATAR_OWNER) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{11}
}

type MSG_OPERATION int32

const (
	MSG_OPERATION_UNKNOWN_MSG_OPERATION MSG_OPERATION = 0
	MSG_OPERATION_RECALL                MSG_OPERATION = 1 // 消息撤回
	MSG_OPERATION_URGENT                MSG_OPERATION = 2 // 消息加急
)

// Enum value maps for MSG_OPERATION.
var (
	MSG_OPERATION_name = map[int32]string{
		0: "UNKNOWN_MSG_OPERATION",
		1: "RECALL",
		2: "URGENT",
	}
	MSG_OPERATION_value = map[string]int32{
		"UNKNOWN_MSG_OPERATION": 0,
		"RECALL":                1,
		"URGENT":                2,
	}
)

func (x MSG_OPERATION) Enum() *MSG_OPERATION {
	p := new(MSG_OPERATION)
	*p = x
	return p
}

func (x MSG_OPERATION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSG_OPERATION) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[12].Descriptor()
}

func (MSG_OPERATION) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[12]
}

func (x MSG_OPERATION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSG_OPERATION.Descriptor instead.
func (MSG_OPERATION) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{12}
}

type CHAT_GROUP_ROLE int32

const (
	CHAT_GROUP_ROLE_ORDINARY_MEMBER CHAT_GROUP_ROLE = 0 // 普通成员
	CHAT_GROUP_ROLE_ADMINISTRATOR   CHAT_GROUP_ROLE = 8 // 管理员
	CHAT_GROUP_ROLE_MASTER          CHAT_GROUP_ROLE = 9 // 群主
)

// Enum value maps for CHAT_GROUP_ROLE.
var (
	CHAT_GROUP_ROLE_name = map[int32]string{
		0: "ORDINARY_MEMBER",
		8: "ADMINISTRATOR",
		9: "MASTER",
	}
	CHAT_GROUP_ROLE_value = map[string]int32{
		"ORDINARY_MEMBER": 0,
		"ADMINISTRATOR":   8,
		"MASTER":          9,
	}
)

func (x CHAT_GROUP_ROLE) Enum() *CHAT_GROUP_ROLE {
	p := new(CHAT_GROUP_ROLE)
	*p = x
	return p
}

func (x CHAT_GROUP_ROLE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CHAT_GROUP_ROLE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[13].Descriptor()
}

func (CHAT_GROUP_ROLE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[13]
}

func (x CHAT_GROUP_ROLE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CHAT_GROUP_ROLE.Descriptor instead.
func (CHAT_GROUP_ROLE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{13}
}

type ORDER_TYPE int32

const (
	ORDER_TYPE_ASC  ORDER_TYPE = 0
	ORDER_TYPE_DESC ORDER_TYPE = 1
)

// Enum value maps for ORDER_TYPE.
var (
	ORDER_TYPE_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	ORDER_TYPE_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x ORDER_TYPE) Enum() *ORDER_TYPE {
	p := new(ORDER_TYPE)
	*p = x
	return p
}

func (x ORDER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ORDER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[14].Descriptor()
}

func (ORDER_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[14]
}

func (x ORDER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ORDER_TYPE.Descriptor instead.
func (ORDER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{14}
}

type GENDER int32

const (
	GENDER_UNKNOWN_GENDER GENDER = 0
	GENDER_MALE           GENDER = 1 // 男
	GENDER_FEMALE         GENDER = 2 // 女
)

// Enum value maps for GENDER.
var (
	GENDER_name = map[int32]string{
		0: "UNKNOWN_GENDER",
		1: "MALE",
		2: "FEMALE",
	}
	GENDER_value = map[string]int32{
		"UNKNOWN_GENDER": 0,
		"MALE":           1,
		"FEMALE":         2,
	}
)

func (x GENDER) Enum() *GENDER {
	p := new(GENDER)
	*p = x
	return p
}

func (x GENDER) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GENDER) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[15].Descriptor()
}

func (GENDER) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[15]
}

func (x GENDER) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GENDER.Descriptor instead.
func (GENDER) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{15}
}

type LOGIN_CHANNEL int32

const (
	LOGIN_CHANNEL_UNKNOWN_CHANNEL LOGIN_CHANNEL = 0
	LOGIN_CHANNEL_GITHUB          LOGIN_CHANNEL = 1
	LOGIN_CHANNEL_GOOGLE          LOGIN_CHANNEL = 2
)

// Enum value maps for LOGIN_CHANNEL.
var (
	LOGIN_CHANNEL_name = map[int32]string{
		0: "UNKNOWN_CHANNEL",
		1: "GITHUB",
		2: "GOOGLE",
	}
	LOGIN_CHANNEL_value = map[string]int32{
		"UNKNOWN_CHANNEL": 0,
		"GITHUB":          1,
		"GOOGLE":          2,
	}
)

func (x LOGIN_CHANNEL) Enum() *LOGIN_CHANNEL {
	p := new(LOGIN_CHANNEL)
	*p = x
	return p
}

func (x LOGIN_CHANNEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LOGIN_CHANNEL) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[16].Descriptor()
}

func (LOGIN_CHANNEL) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[16]
}

func (x LOGIN_CHANNEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LOGIN_CHANNEL.Descriptor instead.
func (LOGIN_CHANNEL) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{16}
}

type RED_ENVELOPE_TYPE int32

const (
	RED_ENVELOPE_TYPE_UNKNOWN_ENVELOPE_TYPE RED_ENVELOPE_TYPE = 0
	RED_ENVELOPE_TYPE_AVERAGE               RED_ENVELOPE_TYPE = 1 // 均分红包
	RED_ENVELOPE_TYPE_RANDOM                RED_ENVELOPE_TYPE = 2 // 碰运气红包
	RED_ENVELOPE_TYPE_FIXED                 RED_ENVELOPE_TYPE = 3 // 红包固定金额
)

// Enum value maps for RED_ENVELOPE_TYPE.
var (
	RED_ENVELOPE_TYPE_name = map[int32]string{
		0: "UNKNOWN_ENVELOPE_TYPE",
		1: "AVERAGE",
		2: "RANDOM",
		3: "FIXED",
	}
	RED_ENVELOPE_TYPE_value = map[string]int32{
		"UNKNOWN_ENVELOPE_TYPE": 0,
		"AVERAGE":               1,
		"RANDOM":                2,
		"FIXED":                 3,
	}
)

func (x RED_ENVELOPE_TYPE) Enum() *RED_ENVELOPE_TYPE {
	p := new(RED_ENVELOPE_TYPE)
	*p = x
	return p
}

func (x RED_ENVELOPE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RED_ENVELOPE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[17].Descriptor()
}

func (RED_ENVELOPE_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[17]
}

func (x RED_ENVELOPE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RED_ENVELOPE_TYPE.Descriptor instead.
func (RED_ENVELOPE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{17}
}

type RECEIVER_TYPE int32

const (
	RECEIVER_TYPE_UNKNOWN_RECEIVER_TYPE   RECEIVER_TYPE = 0
	RECEIVER_TYPE_PRIVATE_CHAT_DESIGNATED RECEIVER_TYPE = 1 // 私聊指定人
	RECEIVER_TYPE_GROUP_CHAT_ALL_MEMBER   RECEIVER_TYPE = 2 // 群聊所有人
	RECEIVER_TYPE_GROUP_CHAT_DESIGNATED   RECEIVER_TYPE = 3 // 群聊指定人
)

// Enum value maps for RECEIVER_TYPE.
var (
	RECEIVER_TYPE_name = map[int32]string{
		0: "UNKNOWN_RECEIVER_TYPE",
		1: "PRIVATE_CHAT_DESIGNATED",
		2: "GROUP_CHAT_ALL_MEMBER",
		3: "GROUP_CHAT_DESIGNATED",
	}
	RECEIVER_TYPE_value = map[string]int32{
		"UNKNOWN_RECEIVER_TYPE":   0,
		"PRIVATE_CHAT_DESIGNATED": 1,
		"GROUP_CHAT_ALL_MEMBER":   2,
		"GROUP_CHAT_DESIGNATED":   3,
	}
)

func (x RECEIVER_TYPE) Enum() *RECEIVER_TYPE {
	p := new(RECEIVER_TYPE)
	*p = x
	return p
}

func (x RECEIVER_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RECEIVER_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[18].Descriptor()
}

func (RECEIVER_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[18]
}

func (x RECEIVER_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RECEIVER_TYPE.Descriptor instead.
func (RECEIVER_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{18}
}

type WALLET_TYPE int32

const (
	WALLET_TYPE_UNKNOWN_WALLET_TYPE WALLET_TYPE = 0
	WALLET_TYPE_CURRENCY            WALLET_TYPE = 1 // 货币 单位(分)
	WALLET_TYPE_DIAMOND             WALLET_TYPE = 2 // 钻石
	WALLET_TYPE_GOLD_COIN           WALLET_TYPE = 3 // 金币
	WALLET_TYPE_SILVER_COIN         WALLET_TYPE = 4 // 银币
	WALLET_TYPE_BRONZE_COIN         WALLET_TYPE = 5 // 铜币
	WALLET_TYPE_POINT               WALLET_TYPE = 6 // 积分
)

// Enum value maps for WALLET_TYPE.
var (
	WALLET_TYPE_name = map[int32]string{
		0: "UNKNOWN_WALLET_TYPE",
		1: "CURRENCY",
		2: "DIAMOND",
		3: "GOLD_COIN",
		4: "SILVER_COIN",
		5: "BRONZE_COIN",
		6: "POINT",
	}
	WALLET_TYPE_value = map[string]int32{
		"UNKNOWN_WALLET_TYPE": 0,
		"CURRENCY":            1,
		"DIAMOND":             2,
		"GOLD_COIN":           3,
		"SILVER_COIN":         4,
		"BRONZE_COIN":         5,
		"POINT":               6,
	}
)

func (x WALLET_TYPE) Enum() *WALLET_TYPE {
	p := new(WALLET_TYPE)
	*p = x
	return p
}

func (x WALLET_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WALLET_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[19].Descriptor()
}

func (WALLET_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[19]
}

func (x WALLET_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WALLET_TYPE.Descriptor instead.
func (WALLET_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{19}
}

type WALLET_STATUS int32

const (
	WALLET_STATUS_UNKNOWN_WALLET_STATUS WALLET_STATUS = 0
	WALLET_STATUS_ACTIVE                WALLET_STATUS = 1 // 激活状态
	WALLET_STATUS_INACTIVE              WALLET_STATUS = 2 // 非活动状态
	WALLET_STATUS_FROZEN                WALLET_STATUS = 3 // 冻结状态
)

// Enum value maps for WALLET_STATUS.
var (
	WALLET_STATUS_name = map[int32]string{
		0: "UNKNOWN_WALLET_STATUS",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "FROZEN",
	}
	WALLET_STATUS_value = map[string]int32{
		"UNKNOWN_WALLET_STATUS": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"FROZEN":                3,
	}
)

func (x WALLET_STATUS) Enum() *WALLET_STATUS {
	p := new(WALLET_STATUS)
	*p = x
	return p
}

func (x WALLET_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WALLET_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[20].Descriptor()
}

func (WALLET_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[20]
}

func (x WALLET_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WALLET_STATUS.Descriptor instead.
func (WALLET_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{20}
}

type RED_ENVELOPE_STATUS int32

const (
	RED_ENVELOPE_STATUS_CREATED_ENVELOPE RED_ENVELOPE_STATUS = 0
	RED_ENVELOPE_STATUS_ISSUED           RED_ENVELOPE_STATUS = 1 // 已发放
	RED_ENVELOPE_STATUS_RECEIVED         RED_ENVELOPE_STATUS = 2 // 已领完
	RED_ENVELOPE_STATUS_EXPIRED          RED_ENVELOPE_STATUS = 3 // 已过期且退还剩余红包
)

// Enum value maps for RED_ENVELOPE_STATUS.
var (
	RED_ENVELOPE_STATUS_name = map[int32]string{
		0: "CREATED_ENVELOPE",
		1: "ISSUED",
		2: "RECEIVED",
		3: "EXPIRED",
	}
	RED_ENVELOPE_STATUS_value = map[string]int32{
		"CREATED_ENVELOPE": 0,
		"ISSUED":           1,
		"RECEIVED":         2,
		"EXPIRED":          3,
	}
)

func (x RED_ENVELOPE_STATUS) Enum() *RED_ENVELOPE_STATUS {
	p := new(RED_ENVELOPE_STATUS)
	*p = x
	return p
}

func (x RED_ENVELOPE_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RED_ENVELOPE_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[21].Descriptor()
}

func (RED_ENVELOPE_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[21]
}

func (x RED_ENVELOPE_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RED_ENVELOPE_STATUS.Descriptor instead.
func (RED_ENVELOPE_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{21}
}

type PAYMENT_STATUS int32

const (
	PAYMENT_STATUS_CREATED_UNPAID PAYMENT_STATUS = 0 // 未支付
	PAYMENT_STATUS_PAYING         PAYMENT_STATUS = 1 // 支付中
	PAYMENT_STATUS_PAID           PAYMENT_STATUS = 2 // 已支付
	PAYMENT_STATUS_FAILED         PAYMENT_STATUS = 3 // 支付失败
	PAYMENT_STATUS_CLOSED         PAYMENT_STATUS = 4 // 已关闭
)

// Enum value maps for PAYMENT_STATUS.
var (
	PAYMENT_STATUS_name = map[int32]string{
		0: "CREATED_UNPAID",
		1: "PAYING",
		2: "PAID",
		3: "FAILED",
		4: "CLOSED",
	}
	PAYMENT_STATUS_value = map[string]int32{
		"CREATED_UNPAID": 0,
		"PAYING":         1,
		"PAID":           2,
		"FAILED":         3,
		"CLOSED":         4,
	}
)

func (x PAYMENT_STATUS) Enum() *PAYMENT_STATUS {
	p := new(PAYMENT_STATUS)
	*p = x
	return p
}

func (x PAYMENT_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PAYMENT_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[22].Descriptor()
}

func (PAYMENT_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[22]
}

func (x PAYMENT_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PAYMENT_STATUS.Descriptor instead.
func (PAYMENT_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{22}
}

type ORDER_STATUS int32

const (
	ORDER_STATUS_CREATED_ORDER_UNPAID ORDER_STATUS = 0 // 未支付
	ORDER_STATUS_ORDER_PAYING         ORDER_STATUS = 1 // 支付中
	ORDER_STATUS_ORDER_PAID           ORDER_STATUS = 2 // 已支付
	ORDER_STATUS_ORDER_FAILED         ORDER_STATUS = 3 // 支付失败
	ORDER_STATUS_ORDER_CLOSED         ORDER_STATUS = 4 // 已关闭
)

// Enum value maps for ORDER_STATUS.
var (
	ORDER_STATUS_name = map[int32]string{
		0: "CREATED_ORDER_UNPAID",
		1: "ORDER_PAYING",
		2: "ORDER_PAID",
		3: "ORDER_FAILED",
		4: "ORDER_CLOSED",
	}
	ORDER_STATUS_value = map[string]int32{
		"CREATED_ORDER_UNPAID": 0,
		"ORDER_PAYING":         1,
		"ORDER_PAID":           2,
		"ORDER_FAILED":         3,
		"ORDER_CLOSED":         4,
	}
)

func (x ORDER_STATUS) Enum() *ORDER_STATUS {
	p := new(ORDER_STATUS)
	*p = x
	return p
}

func (x ORDER_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ORDER_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[23].Descriptor()
}

func (ORDER_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[23]
}

func (x ORDER_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ORDER_STATUS.Descriptor instead.
func (ORDER_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{23}
}

type TRADE_TYPE int32

const (
	TRADE_TYPE_UNKNOWN_TRADE_TYPE TRADE_TYPE = 0
	TRADE_TYPE_INCOME             TRADE_TYPE = 1 // 收入
	TRADE_TYPE_EXPENSE            TRADE_TYPE = 2 // 支出
)

// Enum value maps for TRADE_TYPE.
var (
	TRADE_TYPE_name = map[int32]string{
		0: "UNKNOWN_TRADE_TYPE",
		1: "INCOME",
		2: "EXPENSE",
	}
	TRADE_TYPE_value = map[string]int32{
		"UNKNOWN_TRADE_TYPE": 0,
		"INCOME":             1,
		"EXPENSE":            2,
	}
)

func (x TRADE_TYPE) Enum() *TRADE_TYPE {
	p := new(TRADE_TYPE)
	*p = x
	return p
}

func (x TRADE_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[24].Descriptor()
}

func (TRADE_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[24]
}

func (x TRADE_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_TYPE.Descriptor instead.
func (TRADE_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{24}
}

type TRADE_TYPE_ID int32

const (
	TRADE_TYPE_ID_UNKNOWN_TRADE_TYPE_ID         TRADE_TYPE_ID = 0
	TRADE_TYPE_ID_RED_ENVELOPE_SEND_ID          TRADE_TYPE_ID = 1  // 发放红包
	TRADE_TYPE_ID_RED_ENVELOPE_RECEIVE_ID       TRADE_TYPE_ID = 2  // 收红包
	TRADE_TYPE_ID_RED_ENVELOPE_RETURN_ID        TRADE_TYPE_ID = 3  // 红包余额退还
	TRADE_TYPE_ID_SIGN_REWARD_ID                TRADE_TYPE_ID = 4  // 注册奖励
	TRADE_TYPE_ID_REPO_CREATE_TASK_ID           TRADE_TYPE_ID = 5  // 创建任务
	TRADE_TYPE_ID_REPO_UPDATE_TASK_RETURN_ID    TRADE_TYPE_ID = 6  // 更新任务返还
	TRADE_TYPE_ID_REPO_UPDATE_TASK_LAUNCH_ID    TRADE_TYPE_ID = 7  // 更新任务上架
	TRADE_TYPE_ID_REPO_TASK_REWARD_ID           TRADE_TYPE_ID = 8  // 任务奖励
	TRADE_TYPE_ID_REGISTER_INVITATION_REWARD_ID TRADE_TYPE_ID = 9  // 注册邀请奖励
	TRADE_TYPE_ID_WITHDRAW_APPROVAL_REJECTED    TRADE_TYPE_ID = 10 // 驳回提现
	TRADE_TYPE_ID_WITHDRAW_ID                   TRADE_TYPE_ID = 11 // 提现
	TRADE_TYPE_ID_WITHDRAW_FEE_ID               TRADE_TYPE_ID = 12 // 提现手续费
	TRADE_TYPE_ID_DEPOSIT_ID                    TRADE_TYPE_ID = 13 // 充值
	TRADE_TYPE_ID_REPO_TASK_STAR_ID             TRADE_TYPE_ID = 14
	TRADE_TYPE_ID_REPO_TASK_FORK_ID             TRADE_TYPE_ID = 15
	TRADE_TYPE_ID_REPO_TASK_WATCH_ID            TRADE_TYPE_ID = 16
	TRADE_TYPE_ID_REPO_TASK_FOLLOW_ID           TRADE_TYPE_ID = 17
	TRADE_TYPE_ID_REPO_CLOSE_TASK_ID            TRADE_TYPE_ID = 18
	TRADE_TYPE_ID_REPO_DELETE_TASK_ID           TRADE_TYPE_ID = 19
)

// Enum value maps for TRADE_TYPE_ID.
var (
	TRADE_TYPE_ID_name = map[int32]string{
		0:  "UNKNOWN_TRADE_TYPE_ID",
		1:  "RED_ENVELOPE_SEND_ID",
		2:  "RED_ENVELOPE_RECEIVE_ID",
		3:  "RED_ENVELOPE_RETURN_ID",
		4:  "SIGN_REWARD_ID",
		5:  "REPO_CREATE_TASK_ID",
		6:  "REPO_UPDATE_TASK_RETURN_ID",
		7:  "REPO_UPDATE_TASK_LAUNCH_ID",
		8:  "REPO_TASK_REWARD_ID",
		9:  "REGISTER_INVITATION_REWARD_ID",
		10: "WITHDRAW_APPROVAL_REJECTED",
		11: "WITHDRAW_ID",
		12: "WITHDRAW_FEE_ID",
		13: "DEPOSIT_ID",
		14: "REPO_TASK_STAR_ID",
		15: "REPO_TASK_FORK_ID",
		16: "REPO_TASK_WATCH_ID",
		17: "REPO_TASK_FOLLOW_ID",
		18: "REPO_CLOSE_TASK_ID",
		19: "REPO_DELETE_TASK_ID",
	}
	TRADE_TYPE_ID_value = map[string]int32{
		"UNKNOWN_TRADE_TYPE_ID":         0,
		"RED_ENVELOPE_SEND_ID":          1,
		"RED_ENVELOPE_RECEIVE_ID":       2,
		"RED_ENVELOPE_RETURN_ID":        3,
		"SIGN_REWARD_ID":                4,
		"REPO_CREATE_TASK_ID":           5,
		"REPO_UPDATE_TASK_RETURN_ID":    6,
		"REPO_UPDATE_TASK_LAUNCH_ID":    7,
		"REPO_TASK_REWARD_ID":           8,
		"REGISTER_INVITATION_REWARD_ID": 9,
		"WITHDRAW_APPROVAL_REJECTED":    10,
		"WITHDRAW_ID":                   11,
		"WITHDRAW_FEE_ID":               12,
		"DEPOSIT_ID":                    13,
		"REPO_TASK_STAR_ID":             14,
		"REPO_TASK_FORK_ID":             15,
		"REPO_TASK_WATCH_ID":            16,
		"REPO_TASK_FOLLOW_ID":           17,
		"REPO_CLOSE_TASK_ID":            18,
		"REPO_DELETE_TASK_ID":           19,
	}
)

func (x TRADE_TYPE_ID) Enum() *TRADE_TYPE_ID {
	p := new(TRADE_TYPE_ID)
	*p = x
	return p
}

func (x TRADE_TYPE_ID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TRADE_TYPE_ID) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[25].Descriptor()
}

func (TRADE_TYPE_ID) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[25]
}

func (x TRADE_TYPE_ID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TRADE_TYPE_ID.Descriptor instead.
func (TRADE_TYPE_ID) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{25}
}

type GRAB_RESULT int32

const (
	GRAB_RESULT_GRAB_FAILED  GRAB_RESULT = 0 // 失败
	GRAB_RESULT_GRAB_SUCCESS GRAB_RESULT = 1 // 成功
)

// Enum value maps for GRAB_RESULT.
var (
	GRAB_RESULT_name = map[int32]string{
		0: "GRAB_FAILED",
		1: "GRAB_SUCCESS",
	}
	GRAB_RESULT_value = map[string]int32{
		"GRAB_FAILED":  0,
		"GRAB_SUCCESS": 1,
	}
)

func (x GRAB_RESULT) Enum() *GRAB_RESULT {
	p := new(GRAB_RESULT)
	*p = x
	return p
}

func (x GRAB_RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GRAB_RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[26].Descriptor()
}

func (GRAB_RESULT) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[26]
}

func (x GRAB_RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GRAB_RESULT.Descriptor instead.
func (GRAB_RESULT) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{26}
}

type OPEN_RESULT int32

const (
	OPEN_RESULT_OPEN_FAILED  OPEN_RESULT = 0 // 失败
	OPEN_RESULT_OPEN_SUCCESS OPEN_RESULT = 1 // 成功
)

// Enum value maps for OPEN_RESULT.
var (
	OPEN_RESULT_name = map[int32]string{
		0: "OPEN_FAILED",
		1: "OPEN_SUCCESS",
	}
	OPEN_RESULT_value = map[string]int32{
		"OPEN_FAILED":  0,
		"OPEN_SUCCESS": 1,
	}
)

func (x OPEN_RESULT) Enum() *OPEN_RESULT {
	p := new(OPEN_RESULT)
	*p = x
	return p
}

func (x OPEN_RESULT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OPEN_RESULT) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[27].Descriptor()
}

func (OPEN_RESULT) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[27]
}

func (x OPEN_RESULT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OPEN_RESULT.Descriptor instead.
func (OPEN_RESULT) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{27}
}

type RED_ENVELOPE_RECEIVE_STATUS int32

const (
	RED_ENVELOPE_RECEIVE_STATUS_RECEIVING       RED_ENVELOPE_RECEIVE_STATUS = 0
	RED_ENVELOPE_RECEIVE_STATUS_RECEIVE_SUCCESS RED_ENVELOPE_RECEIVE_STATUS = 1
	RED_ENVELOPE_RECEIVE_STATUS_RECEIVE_FAILED  RED_ENVELOPE_RECEIVE_STATUS = 2
)

// Enum value maps for RED_ENVELOPE_RECEIVE_STATUS.
var (
	RED_ENVELOPE_RECEIVE_STATUS_name = map[int32]string{
		0: "RECEIVING",
		1: "RECEIVE_SUCCESS",
		2: "RECEIVE_FAILED",
	}
	RED_ENVELOPE_RECEIVE_STATUS_value = map[string]int32{
		"RECEIVING":       0,
		"RECEIVE_SUCCESS": 1,
		"RECEIVE_FAILED":  2,
	}
)

func (x RED_ENVELOPE_RECEIVE_STATUS) Enum() *RED_ENVELOPE_RECEIVE_STATUS {
	p := new(RED_ENVELOPE_RECEIVE_STATUS)
	*p = x
	return p
}

func (x RED_ENVELOPE_RECEIVE_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RED_ENVELOPE_RECEIVE_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[28].Descriptor()
}

func (RED_ENVELOPE_RECEIVE_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[28]
}

func (x RED_ENVELOPE_RECEIVE_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RED_ENVELOPE_RECEIVE_STATUS.Descriptor instead.
func (RED_ENVELOPE_RECEIVE_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{28}
}

type PAY_TYPE int32

const (
	PAY_TYPE_UNKNOWN_PAY_TYPE PAY_TYPE = 0
	PAY_TYPE_ALIPAY           PAY_TYPE = 1 // 阿里支付
	PAY_TYPE_WXPAY            PAY_TYPE = 2 // 微信支付
	PAY_TYPE_UNIONPAY         PAY_TYPE = 3 // 银联支付
	PAY_TYPE_PAYPAL           PAY_TYPE = 4 // PayPal
)

// Enum value maps for PAY_TYPE.
var (
	PAY_TYPE_name = map[int32]string{
		0: "UNKNOWN_PAY_TYPE",
		1: "ALIPAY",
		2: "WXPAY",
		3: "UNIONPAY",
		4: "PAYPAL",
	}
	PAY_TYPE_value = map[string]int32{
		"UNKNOWN_PAY_TYPE": 0,
		"ALIPAY":           1,
		"WXPAY":            2,
		"UNIONPAY":         3,
		"PAYPAL":           4,
	}
)

func (x PAY_TYPE) Enum() *PAY_TYPE {
	p := new(PAY_TYPE)
	*p = x
	return p
}

func (x PAY_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PAY_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[29].Descriptor()
}

func (PAY_TYPE) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[29]
}

func (x PAY_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PAY_TYPE.Descriptor instead.
func (PAY_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{29}
}

type REPO_CHANNEL int32

const (
	REPO_CHANNEL_GITHUB_REPO REPO_CHANNEL = 0
)

// Enum value maps for REPO_CHANNEL.
var (
	REPO_CHANNEL_name = map[int32]string{
		0: "GITHUB_REPO",
	}
	REPO_CHANNEL_value = map[string]int32{
		"GITHUB_REPO": 0,
	}
)

func (x REPO_CHANNEL) Enum() *REPO_CHANNEL {
	p := new(REPO_CHANNEL)
	*p = x
	return p
}

func (x REPO_CHANNEL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (REPO_CHANNEL) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[30].Descriptor()
}

func (REPO_CHANNEL) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[30]
}

func (x REPO_CHANNEL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use REPO_CHANNEL.Descriptor instead.
func (REPO_CHANNEL) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{30}
}

type TASK_STATUS int32

const (
	TASK_STATUS_UNKNOWN_TASK_STATUS TASK_STATUS = 0
	TASK_STATUS_TASK_ENABLED        TASK_STATUS = 1 // 任务开启
	TASK_STATUS_TASK_DISABLED       TASK_STATUS = 2 // 任务关闭
)

// Enum value maps for TASK_STATUS.
var (
	TASK_STATUS_name = map[int32]string{
		0: "UNKNOWN_TASK_STATUS",
		1: "TASK_ENABLED",
		2: "TASK_DISABLED",
	}
	TASK_STATUS_value = map[string]int32{
		"UNKNOWN_TASK_STATUS": 0,
		"TASK_ENABLED":        1,
		"TASK_DISABLED":       2,
	}
)

func (x TASK_STATUS) Enum() *TASK_STATUS {
	p := new(TASK_STATUS)
	*p = x
	return p
}

func (x TASK_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TASK_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[31].Descriptor()
}

func (TASK_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[31]
}

func (x TASK_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TASK_STATUS.Descriptor instead.
func (TASK_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{31}
}

type VERIFICATION_STATUS int32

const (
	VERIFICATION_STATUS_UNKNOWN_VERIFICATION_STATUS VERIFICATION_STATUS = 0
	VERIFICATION_STATUS_PENDING                     VERIFICATION_STATUS = 1 // 待核查
	VERIFICATION_STATUS_APPROVED                    VERIFICATION_STATUS = 2 // 已核查并通过
	VERIFICATION_STATUS_REJECTED                    VERIFICATION_STATUS = 3 // 已核查但未通过
)

// Enum value maps for VERIFICATION_STATUS.
var (
	VERIFICATION_STATUS_name = map[int32]string{
		0: "UNKNOWN_VERIFICATION_STATUS",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
	}
	VERIFICATION_STATUS_value = map[string]int32{
		"UNKNOWN_VERIFICATION_STATUS": 0,
		"PENDING":                     1,
		"APPROVED":                    2,
		"REJECTED":                    3,
	}
)

func (x VERIFICATION_STATUS) Enum() *VERIFICATION_STATUS {
	p := new(VERIFICATION_STATUS)
	*p = x
	return p
}

func (x VERIFICATION_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VERIFICATION_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[32].Descriptor()
}

func (VERIFICATION_STATUS) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[32]
}

func (x VERIFICATION_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VERIFICATION_STATUS.Descriptor instead.
func (VERIFICATION_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{32}
}

type ACTION int32

const (
	ACTION_UNKNOWN_ACTION ACTION = 0
	ACTION_CREATE         ACTION = 1 // 创建
	ACTION_UPDATE         ACTION = 2 // 更新
	ACTION_DELETE         ACTION = 3 // 删除
)

// Enum value maps for ACTION.
var (
	ACTION_name = map[int32]string{
		0: "UNKNOWN_ACTION",
		1: "CREATE",
		2: "UPDATE",
		3: "DELETE",
	}
	ACTION_value = map[string]int32{
		"UNKNOWN_ACTION": 0,
		"CREATE":         1,
		"UPDATE":         2,
		"DELETE":         3,
	}
)

func (x ACTION) Enum() *ACTION {
	p := new(ACTION)
	*p = x
	return p
}

func (x ACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_enum_enum_proto_enumTypes[33].Descriptor()
}

func (ACTION) Type() protoreflect.EnumType {
	return &file_pb_enum_enum_proto_enumTypes[33]
}

func (x ACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTION.Descriptor instead.
func (ACTION) EnumDescriptor() ([]byte, []int) {
	return file_pb_enum_enum_proto_rawDescGZIP(), []int{33}
}

var File_pb_enum_enum_proto protoreflect.FileDescriptor

var file_pb_enum_enum_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x62, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x62, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x2a, 0x47, 0x0a,
	0x0c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x18, 0x0a,
	0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x59, 0x0a, 0x05, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10,
	0x04, 0x2a, 0x8f, 0x02, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54,
	0x4f, 0x50, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d,
	0x53, 0x47, 0x10, 0xe8, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0xe9,
	0x07, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xea, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4a,
	0x4f, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x10, 0xeb, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x54,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0xec, 0x07, 0x12, 0x1c,
	0x0a, 0x17, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xed, 0x07, 0x12, 0x18, 0x0a, 0x13,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0xd0, 0x0f, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x47,
	0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45,
	0x10, 0xb8, 0x17, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45,
	0x10, 0xb9, 0x17, 0x2a, 0x21, 0x0a, 0x0c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x45, 0x53, 0x50, 0x10, 0x01, 0x2a, 0x3a, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f,
	0x49, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45,
	0x42, 0x10, 0x05, 0x2a, 0x36, 0x0a, 0x08, 0x4d, 0x53, 0x47, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x2a, 0xb7, 0x02, 0x0a, 0x08,
	0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x48, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x0b,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10,
	0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x49, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x10, 0x10,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x5f,
	0x45, 0x4e, 0x56, 0x10, 0x11, 0x2a, 0x67, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41,
	0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x49, 0x54, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x06, 0x2a, 0x43,
	0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12, 0x20, 0x0a, 0x1c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x41,
	0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x46,
	0x55, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x0c, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x10,
	0x02, 0x2a, 0x42, 0x0a, 0x0d, 0x4d, 0x53, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x53,
	0x47, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x52, 0x47,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x08,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x09, 0x2a, 0x1f, 0x0a, 0x0a,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x2a, 0x32, 0x0a,
	0x06, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x2a, 0x3c, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x2a,
	0x52, 0x0a, 0x11, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x7d, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x7d, 0x0a, 0x0b, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x41, 0x4d,
	0x4f, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x4f,
	0x49, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x5f,
	0x43, 0x4f, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10,
	0x06, 0x2a, 0x50, 0x0a, 0x0d, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x41,
	0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x4f, 0x5a, 0x45,
	0x4e, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x13, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c,
	0x4f, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x52, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x50, 0x41, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x6e, 0x0a, 0x0c, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x50,
	0x41, 0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50,
	0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x3d, 0x0a, 0x0a, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x58, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x8c, 0x04, 0x0a, 0x0d, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x44, 0x5f, 0x45,
	0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x50, 0x4f, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x50, 0x4f, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x41, 0x55, 0x4e,
	0x43, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x44, 0x10, 0x08,
	0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x49,
	0x44, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x49, 0x44, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x5f, 0x46, 0x45, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x50,
	0x4f, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x0e,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4f,
	0x52, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4f, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x50, 0x4f,
	0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0x12,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x50, 0x4f, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0x13, 0x2a, 0x30, 0x0a, 0x0b, 0x47, 0x52, 0x41,
	0x42, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x41, 0x42,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x41,
	0x42, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x0b, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x45, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x2a, 0x55, 0x0a,
	0x1b, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x51, 0x0a, 0x08, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x49, 0x50, 0x41, 0x59,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x58, 0x50, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x50, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x41, 0x59, 0x50, 0x41, 0x4c, 0x10, 0x04, 0x2a, 0x1f, 0x0a, 0x0c, 0x52, 0x45, 0x50, 0x4f, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x49, 0x54, 0x48, 0x55,
	0x42, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x10, 0x00, 0x2a, 0x4b, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x1f, 0x0a, 0x1b,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x42, 0x20, 0x5a, 0x1e, 0x6c, 0x61, 0x72, 0x6b,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x3b, 0x70, 0x62, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pb_enum_enum_proto_rawDescOnce sync.Once
	file_pb_enum_enum_proto_rawDescData = file_pb_enum_enum_proto_rawDesc
)

func file_pb_enum_enum_proto_rawDescGZIP() []byte {
	file_pb_enum_enum_proto_rawDescOnce.Do(func() {
		file_pb_enum_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_enum_enum_proto_rawDescData)
	})
	return file_pb_enum_enum_proto_rawDescData
}

var file_pb_enum_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 34)
var file_pb_enum_enum_proto_goTypes = []interface{}{
	(ACCOUNT_TYPE)(0),                // 0: pb_enum.ACCOUNT_TYPE
	(TOPIC)(0),                       // 1: pb_enum.TOPIC
	(SUB_TOPIC)(0),                   // 2: pb_enum.SUB_TOPIC
	(MESSAGE_TYPE)(0),                // 3: pb_enum.MESSAGE_TYPE
	(CHAT_TYPE)(0),                   // 4: pb_enum.CHAT_TYPE
	(PLATFORM_TYPE)(0),               // 5: pb_enum.PLATFORM_TYPE
	(MSG_FROM)(0),                    // 6: pb_enum.MSG_FROM
	(MSG_TYPE)(0),                    // 7: pb_enum.MSG_TYPE
	(CHAT_STATUS)(0),                 // 8: pb_enum.CHAT_STATUS
	(INVITE_ROLE)(0),                 // 9: pb_enum.INVITE_ROLE
	(INVITE_HANDLE_RESULT)(0),        // 10: pb_enum.INVITE_HANDLE_RESULT
	(AVATAR_OWNER)(0),                // 11: pb_enum.AVATAR_OWNER
	(MSG_OPERATION)(0),               // 12: pb_enum.MSG_OPERATION
	(CHAT_GROUP_ROLE)(0),             // 13: pb_enum.CHAT_GROUP_ROLE
	(ORDER_TYPE)(0),                  // 14: pb_enum.ORDER_TYPE
	(GENDER)(0),                      // 15: pb_enum.GENDER
	(LOGIN_CHANNEL)(0),               // 16: pb_enum.LOGIN_CHANNEL
	(RED_ENVELOPE_TYPE)(0),           // 17: pb_enum.RED_ENVELOPE_TYPE
	(RECEIVER_TYPE)(0),               // 18: pb_enum.RECEIVER_TYPE
	(WALLET_TYPE)(0),                 // 19: pb_enum.WALLET_TYPE
	(WALLET_STATUS)(0),               // 20: pb_enum.WALLET_STATUS
	(RED_ENVELOPE_STATUS)(0),         // 21: pb_enum.RED_ENVELOPE_STATUS
	(PAYMENT_STATUS)(0),              // 22: pb_enum.PAYMENT_STATUS
	(ORDER_STATUS)(0),                // 23: pb_enum.ORDER_STATUS
	(TRADE_TYPE)(0),                  // 24: pb_enum.TRADE_TYPE
	(TRADE_TYPE_ID)(0),               // 25: pb_enum.TRADE_TYPE_ID
	(GRAB_RESULT)(0),                 // 26: pb_enum.GRAB_RESULT
	(OPEN_RESULT)(0),                 // 27: pb_enum.OPEN_RESULT
	(RED_ENVELOPE_RECEIVE_STATUS)(0), // 28: pb_enum.RED_ENVELOPE_RECEIVE_STATUS
	(PAY_TYPE)(0),                    // 29: pb_enum.PAY_TYPE
	(REPO_CHANNEL)(0),                // 30: pb_enum.REPO_CHANNEL
	(TASK_STATUS)(0),                 // 31: pb_enum.TASK_STATUS
	(VERIFICATION_STATUS)(0),         // 32: pb_enum.VERIFICATION_STATUS
	(ACTION)(0),                      // 33: pb_enum.ACTION
}
var file_pb_enum_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_enum_enum_proto_init() }
func file_pb_enum_enum_proto_init() {
	if File_pb_enum_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_enum_enum_proto_rawDesc,
			NumEnums:      34,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_enum_enum_proto_goTypes,
		DependencyIndexes: file_pb_enum_enum_proto_depIdxs,
		EnumInfos:         file_pb_enum_enum_proto_enumTypes,
	}.Build()
	File_pb_enum_enum_proto = out.File
	file_pb_enum_enum_proto_rawDesc = nil
	file_pb_enum_enum_proto_goTypes = nil
	file_pb_enum_enum_proto_depIdxs = nil
}
